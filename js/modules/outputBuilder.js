// Generated by CoffeeScript 1.3.3
(function() {

  define([], function() {
    var OutputBuilder;
    OutputBuilder = (function() {

      function OutputBuilder() {
        this.el = $("");
        this._head = $("");
        this._columns = [];
        this._rows = [];
      }

      OutputBuilder.prototype.heading = function(text) {
        this._head = "<h3>" + text + "</h3>";
        return this;
      };

      OutputBuilder.prototype.columns = function(columns) {
        this._columns = columns;
        return this;
      };

      OutputBuilder.prototype.row = function(row) {
        this._rows.push(row);
        return this({
          getColumns: function() {
            return this._columns;
          },
          getRows: function() {
            return this._rows;
          }
        }, 'render: (result) ->\n	@el = $("<div></div>")\n	klass = \'ui-grid-\' + @_columnCountMap[@_columns.length]\n	section = $("<div data-role=\'collapsible\' data-inset=\'false\' data-collapsed=\'false\' data-theme=\'b\' data-content-theme=\'d\'></div>")\n	section.append(@_head)\n	grid = $("<div class=\'#{klass}\'></div>")\n	for value, i in @_columns\n		klass = @_rowCountMap[i]\n		grid.append("<span class=\'ui-block-#{klass}\' style=\'background:lightgray;\'>#{value}</span>")\n	for row in @_rows\n		for item, j in row\n			klass = @_rowCountMap[j]\n			grid.append("<span class=\'ui-block-#{klass}\' style=\'color:#333333;\'>#{item}</span>")\n	section.append(grid)\n	@el.append(section)\n	inputs = $("<div id=\'#inputs\' data-role=\'collapsible\' data-inset=\'false\' data-theme=\'d\' data-content-theme=\'e\'></div>")\n	inputs.append("<h3>Input Data</h3>")\n	for key, value of result.model\n		inputs.append("<div style=\'display:table-row\'><span style=\'display:table-cell;text-align:right;color:#333333;\'><b>#{result.fields[key].label}:&nbsp;</b></span><span style=\'display:table-cell;text-align:right;\'>#{value}</span></div>")\n	@el.append(inputs)\n	section.collapsible()\n	inputs.collapsible()');
      };

      return OutputBuilder;

    })();
    return {
      create: function() {
        return new OutputBuilder();
      }
    };
  });

}).call(this);
