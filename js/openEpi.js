// Generated by CoffeeScript 1.3.3
(function() {

  define('openEpi', ['modules', 'angular', 'angular-twitter-bootstrap'], function(modules) {
    var getModule, onError, openEpi;
    openEpi = angular.module('openEpi', ['ui.bootstrap']);
    openEpi.config([
      '$routeProvider', function($routeProvider) {
        $routeProvider.when('/', {
          templateUrl: 'partials/modules.html',
          controller: 'ModulesController'
        });
        return $routeProvider.otherwise({
          redirectTo: '/'
        });
      }
    ]);
    openEpi.controller('ModulesController', [
      '$rootScope', '$scope', '$location', function($rootScope, $scope, $location) {
        $scope.modules = [
          {
            name: 'Test 1',
            titleShort: 'Test 1 module'
          }, {
            name: 'Test 2',
            titleShort: 'Test 2 module'
          }
        ];
        return $scope.moduleLoad = function(moduleName) {
          return alert("Loading " + moduleName);
        };
      }
    ]);
    onError = function(message) {
      console.log('Error: ');
      return console.log(message);
    };
    getModule = function(moduleName) {
      var module;
      module = modules[moduleName];
      if (!(module != null)) {
        onError("Could not find module " + moduleName);
        return null;
      }
      return module;
    };
    console.log(modules);
    'getModuleModel: (module) ->\n  moduleModel = @moduleModels[module.name]\n  if not moduleModel?\n    moduleModel = Backbone.Model.extend(schema: module.inputFields)\n    @moduleModels[module.name] = moduleModel\nreturn moduleModel';

    openEpi.exec = function(moduleName, args) {
      var callback, module;
      module = getModule(moduleName);
      callback = function(result) {
        console.log('Result: ');
        return console.dir(result);
      };
      if (!(module != null)) {
        onError("Could not find module named: " + moduleName);
        return;
      }
      console.log('calculating:' + module);
      return module.calculate(args, callback, onError);
    };
    return openEpi;
  });

}).call(this);
